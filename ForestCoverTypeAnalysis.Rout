
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### MULTIVARIABLE PROBLEM ###
> 
> 
> # LOAD PACKAGES -----------------------------------------------------------
> 
> library(tidyverse) # Data Wrangling
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(DataExplorer) # Data visualization
> library(vroom) # Import data

Attaching package: ‘vroom’

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(tidymodels) # Modeling
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks vroom::spec(), readr::spec()
✖ recipes::step()   masks stats::step()
• Use tidymodels_prefer() to resolve common conflicts.
> library(rpart) # For random forest

Attaching package: ‘rpart’

The following object is masked from ‘package:dials’:

    prune

> library(reshape2) # To be able to melt my table

Attaching package: ‘reshape2’

The following object is masked from ‘package:tidyr’:

    smiths

> library(skimr) # for skim function
> library(stacks) # For stack model
> 
> 
> # LOAD DATA ---------------------------------------------------------------
> 
> # setwd('~/College/Stat348/ForestCoverType')
> trainSet <- vroom('./train.csv')
Rows: 15120 Columns: 56
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (56): Id, Elevation, Aspect, Slope, Horizontal_Distance_To_Hydrology, Ve...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> testSet <- vroom('./test.csv')
Rows: 565892 Columns: 55
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (55): Id, Elevation, Aspect, Slope, Horizontal_Distance_To_Hydrology, Ve...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> trainSet$Cover_Type <- as.factor(trainSet$Cover_Type) # Convert Cover_Type as a factor
> 
> # # EDA ---------------------------------------------------------------------
> # 
> # # dplyr::glimpse(trainSet)
> # # summary(trainSet)
> # # skimr::skim(trainSet)
> # # I have a few zero variabce predictors
> # 
> # # What is the Response Variable (Cover_Type with 7 categories)
> # unique(trainSet$Cover_Type)
> # 
> # # Count per type 
> # summary(trainSet$Cover_Type) # They all have the same amount 2160
> # 
> # # Look at distributions from 2 to 11 per category
> # colnames(trainSet)[2:11]
> # 
> # ggplot(trainSet, aes(x = Elevation, fill = Cover_Type)) +
> #   geom_density(alpha = 0.5) +
> #   labs(title = "Elevation by Cover_Type")
> # # Elevation is very different per type
> # ggplot(trainSet, aes(x = Aspect, fill = Cover_Type)) +
> #   geom_density(alpha = 0.5) +
> #   labs(title = "Aspect by Cover_Type")
> # # Aspect is a little different
> # ggplot(trainSet, aes(x = Slope, fill = Cover_Type)) +
> #   geom_density(alpha = 0.5) +
> #   labs(title = "Slope by Cover_Type")
> # # Slope is almost the same
> # ggplot(trainSet, aes(x = Slope, fill = Cover_Type)) +
> #   geom_density(alpha = 0.5) +
> #   labs(title = "Slope by Cover_Type")
> # 
> 
> 
> # STACKING -----------------------------------------------------------
> 
> # Recipe
> my_recipe <- recipe(Cover_Type~., data=trainSet) %>% 
+   step_rm('Id') %>%
+   step_zv(all_predictors()) %>%# remove all zero variance predictors
+   step_normalize(all_numeric_predictors())  # normalized all numeric predictors
> # glm target encoding encoding precitors
> 
> ## Split data for CV
> folds <- vfold_cv(trainSet, v = 5, repeats=1)
> 
> ## Control Settings for Stacking models
> untunedModel <- control_stack_grid()
> tunedModel <- control_stack_resamples()
> 
> # RANDOM FOREST -----------------------------------------------------------
> 
> # Model
> rf_mod <- rand_forest(mtry = tune(),
+                       min_n=tune(),
+                       trees=300) %>% #Type of model
+   set_engine("ranger") %>% # What R function to use
+   set_mode("classification")
> 
> ## Workflow
> rf_wf <- workflow() %>% 
+   add_recipe(my_recipe) %>%
+   add_model(rf_mod)
> 
> 
> ## Set up grid of tuning values
> tuning_grid <- grid_regular(mtry(range = c(1,52)),
+                             levels = 5, 
+                             min→ A | warning: 52 columns were requested but there were 51 predictors in the data. 51 will be used.
There were issues with some computations   A: x1
There were issues with some computations   A: x2
There were issues with some computations   A: x3
There were issues with some computations   A: x4
There were issues with some computations   A: x5
There were issues with some computations   A: x6
There were issues with some computations   A: x7
There were issues with some computations   A: x8
There were issues with some computations   A: x9
There were issues with some computations   A: x10
There were issues with some computations   A: x10

> 
> save(CV_results, file = "FCT.Rdata")
> 
> ## Find best tuning parameters
> bestTune <- CV_results %>% 
+   select_best("accuracy")
> 
> ## Finalize workflow and predict
> 
> final_wf <- rf_wf %>% 
+   finalize_workflow(bestTune) %>% 
+   fit(data=trainSet)
> 
> preds <- final_wf %>%
+   predict(new_data = testSet, type = 'class')
> head(testSet)
# A tibble: 6 × 55
     Id Elevation Aspect Slope Horizontal_Distance_To_H…¹ Vertical_Distance_To…²
  <dbl>     <dbl>  <dbl> <dbl>                      <dbl>                  <dbl>
1 15121      2680    354    14                          0                      0
2 15122      2683      0    13                          0                      0
3 15123      2713     16    15                          0                      0
4 15124      2709     24    17                          0                      0
5 15125      2706     29    19                          0                      0
6 15126      2699     21    18                         30                      3
# ℹ abbreviated names: ¹​Horizontal_Distance_To_Hydrology,
#   ²​Vertical_Distance_To_Hydrology
# ℹ 49 more variables: Horizontal_Distance_To_Roadways <dbl>,
#   Hillshade_9am <dbl>, Hillshade_Noon <dbl>, Hillshade_3pm <dbl>,
#   Horizontal_Distance_To_Fire_Points <dbl>, Wilderness_Area1 <dbl>,
#   Wilderness_Area2 <dbl>, Wilderness_Area3 <dbl>, Wilderness_Area4 <dbl>,
#   Soil_Type1 <dbl>, Soil_Type2 <dbl>, Soil_Type3 <dbl>, Soil_Type4 <dbl>, …
> # Format table
> testSet$Cover_Type <- preds$.pred_class
> results <- testSet %>%
+   select(Id, Cover_Type)
> 
> # get csv file
> vroom_write(results, 'submissions.csv', delim = ",")
> 
> 
> ## load("name.Rdata")
> 
> # STACKING RANDOM FOREST & PENALIZED REGRESSION ---------------------------
> 
> 
> 
> 
> 
> 
> proc.time()
    user   system  elapsed 
2538.318   61.301 7043.473 
